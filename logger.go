package logger

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"os"
	"runtime"
	"strings"
	"sync"
	"time"
)

// These flags define which text to prefix to each log entry generated by the Logger.
const (
	// Bits or'ed together to control what's printed. There is no control over the
	// order they appear (the order listed here) or the format they present (as
	// described in the comments).  A colon appears after these items:
	//	2009/0123 01:23:23.123123 /a/b/c/d.go:23: message
	Ldate         = 1 << iota     // the date: 2009/0123
	Ltime                         // the time: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	Lmodule                       // module name
	Llevel                        // level: 0(Debug), 1(Info), 2(Warn), 3(Error), 4(Panic), 5(Fatal)
	LstdFlags     = Ldate | Ltime // initial values for the standard logger
	Ldefault      = Llevel | Lshortfile | LstdFlags
) // [prefix][time][level][module][shortfile|longfile]

const (
	DEBUG = iota
	INFO
	WARN
	ERROR
	PANIC
	FATAL
)

const LOG_SUFIX = ".log"

var LEVEL_NAMES = []string{
	"[DEBUG]",
	"[INFO]",
	"[WARN]",
	"[ERROR]",
	"[PANIC]",
	"[FATAL]",
}

// A Logger represents an active logging object that generates lines of
// output to an io.Writer.  Each logging operation makes a single call to
// the Writer's Write method.  A Logger can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.
type Logger struct {
	mu         sync.Mutex   // ensures atomic writes; protects the following fields
	prefix     string       // prefix to write at beginning of each line
	flag       int          // properties
	out        io.Writer    // destination for output
	buf        bytes.Buffer // for accumulating text to write
	level      int
	levelStats [6]int64
	logPath    string
	logFile    string
	create     time.Time
}

var isConsole = false

func SetConsole(_isConsole bool) {
	isConsole = _isConsole
}

var console = &Logger{out: os.Stdout, prefix: "", level: DEBUG, flag: Ldefault}

var std *Logger

func Init(logPath string, logFile string, level int) error {
	std = &Logger{
		prefix:  "",
		level:   level,
		flag:    Ldefault,
		logPath: logPath,
		logFile: logFile,
		create:  time.Now(),
	}

	out, err := os.OpenFile(std.logfileFullName(), os.O_RDWR|os.O_APPEND|os.O_CREATE, 0666)
	if err != nil {
		console.Error(err)
		return err
	}

	std.out = out

	return nil
}

const DATE_FORMAT = "2006-01-02"

func (l *Logger) logfileName() string {
	return l.logFile + "." + l.create.Format(DATE_FORMAT) + LOG_SUFIX
}

func (l *Logger) logfileFullName() string {
	return l.logPath + "/" + l.logFile + "." + l.create.Format(DATE_FORMAT) + LOG_SUFIX
}

// Cheap integer to fixed-width decimal ASCII.  Give a negative width to avoid zero-padding.
// Knows the buffer has capacity.
func itoa(buf *bytes.Buffer, i int, wid int) {
	var u uint = uint(i)
	if u == 0 && wid <= 1 {
		buf.WriteByte('0')
		return
	}

	// Assemble decimal in reverse order.
	var b [32]byte
	bp := len(b)
	for ; u > 0 || wid > 0; u /= 10 {
		bp--
		wid--
		b[bp] = byte(u%10) + '0'
	}

	// avoid slicing b to avoid an allocation.
	for bp < len(b) {
		buf.WriteByte(b[bp])
		bp++
	}
}

func moduleOf(file string) string {
	pos := strings.LastIndex(file, "/")
	if pos != -1 {
		pos1 := strings.LastIndex(file[:pos], "/src/")
		if pos1 != -1 {
			return file[pos1+5 : pos]
		}
	}
	return "UNKNOWN"
}

func (l *Logger) formatHeader(buf *bytes.Buffer, t time.Time, file string, line int, lvl int, reqId string) {
	if l.prefix != "" {
		buf.WriteString(l.prefix)
	}
	if l.flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if l.flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			buf.WriteByte('/')
			itoa(buf, int(month), 2)
			buf.WriteByte('/')
			itoa(buf, day, 2)
			buf.WriteByte(' ')
		}
		if l.flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			buf.WriteByte(':')
			itoa(buf, min, 2)
			buf.WriteByte(':')
			itoa(buf, sec, 2)
			if l.flag&Lmicroseconds != 0 {
				buf.WriteByte('.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			buf.WriteByte(' ')
		}
	}
	if reqId != "" {
		buf.WriteByte('[')
		buf.WriteString(reqId)
		buf.WriteByte(']')
	}
	if l.flag&Llevel != 0 {
		buf.WriteString(LEVEL_NAMES[lvl])
	}
	if l.flag&Lmodule != 0 {
		buf.WriteByte('[')
		buf.WriteString(moduleOf(file))
		buf.WriteByte(']')
		buf.WriteByte(' ')
	}
	if l.flag&(Lshortfile|Llongfile) != 0 {
		if l.flag&Lshortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		buf.WriteString(file)
		buf.WriteByte(':')
		itoa(buf, line, -1)
		buf.WriteString(": ")
	}
}

// Output writes the output for a logging event.  The string s contains
// the text to print after the prefix specified by the flags of the
// Logger.  A newline is appended if the last character of s is not
// already a newline.  callDepth is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2.
func (l *Logger) Output(reqId string, level int, callDepth int, s string) error {
	if level < l.level {
		return nil
	}

	if err := l.checkFile(); err != nil {
		return err
	}

	now := time.Now() // get this early.
	var file string
	var line int
	l.mu.Lock()
	defer l.mu.Unlock()
	if l.flag&(Lshortfile|Llongfile|Lmodule) != 0 {
		// release lock while getting caller info - it's expensive.
		l.mu.Unlock()
		var ok bool
		_, file, line, ok = runtime.Caller(callDepth)
		if !ok {
			file = "???"
			line = 0
		}
		l.mu.Lock()
	}
	l.levelStats[level]++
	l.buf.Reset()
	l.formatHeader(&l.buf, now, file, line, level, reqId)
	l.buf.WriteString(s)
	if len(s) > 0 && s[len(s)-1] != '\n' {
		l.buf.WriteByte('\n')
	}
	_, err := l.out.Write(l.buf.Bytes())
	return err
}

// check new day. if new day, then create new log file
func (l *Logger) checkFile() error {
	now := time.Now()
	if now.Year() > l.create.Year() || now.Month() > l.create.Month() || now.Day() > l.create.Day() {
		l.mu.Lock()
		defer l.mu.Unlock()

		l.create = now

		newOut, err := os.OpenFile(l.logfileFullName(), os.O_RDWR|os.O_APPEND|os.O_CREATE, 0666)
		if err != nil {
			console.Error(err)
			return err
		}

		// close
		if f, ok := l.out.(*os.File); ok {
			f.Close()
			return errors.New("f.out close fail.")
		}

		l.out = newOut
	}

	return nil
}

// Printf calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Printf.
func (l *Logger) Printf(format string, v ...interface{}) {
	l.Output("", INFO, 2, fmt.Sprintf(format, v...))
}

// Print calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Print.
func (l *Logger) Print(v ...interface{}) {
	l.Output("", INFO, 2, fmt.Sprint(v...))
}

// Println calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Println.
func (l *Logger) Println(v ...interface{}) {
	l.Output("", INFO, 2, fmt.Sprintln(v...))
}

func (l *Logger) Debugf(format string, v ...interface{}) {
	if DEBUG < l.level {
		return
	}
	l.Output("", DEBUG, 2, fmt.Sprintf(format, v...))
}

func (l *Logger) Debug(v ...interface{}) {
	if DEBUG < l.level {
		return
	}
	l.Output("", DEBUG, 2, fmt.Sprintln(v...))
}

func (l *Logger) Infof(format string, v ...interface{}) {
	if INFO < l.level {
		return
	}
	l.Output("", INFO, 2, fmt.Sprintf(format, v...))
}

func (l *Logger) Info(v ...interface{}) {
	if INFO < l.level {
		return
	}
	l.Output("", INFO, 2, fmt.Sprintln(v...))
}

func (l *Logger) Warnf(format string, v ...interface{}) {
	l.Output("", WARN, 2, fmt.Sprintf(format, v...))
}

func (l *Logger) Warn(v ...interface{}) {
	l.Output("", WARN, 2, fmt.Sprintln(v...))
}

func (l *Logger) Errorf(format string, v ...interface{}) {
	l.Output("", ERROR, 2, fmt.Sprintf(format, v...))
}

func (l *Logger) Error(v ...interface{}) {
	l.Output("", ERROR, 2, fmt.Sprintln(v...))
}

func (l *Logger) Fatal(v ...interface{}) {
	l.Output("", FATAL, 2, fmt.Sprint(v...))
	os.Exit(1)
}

// Fatalf is equivalent to l.Printf() followed by a call to os.Exit(1).
func (l *Logger) Fatalf(format string, v ...interface{}) {
	l.Output("", FATAL, 2, fmt.Sprintf(format, v...))
	os.Exit(1)
}

// Fatalln is equivalent to l.Println() followed by a call to os.Exit(1).
func (l *Logger) Fatalln(v ...interface{}) {
	l.Output("", FATAL, 2, fmt.Sprintln(v...))
	os.Exit(1)
}

// Panic is equivalent to l.Print() followed by a call to panic().
func (l *Logger) Panic(v ...interface{}) {
	s := fmt.Sprint(v...)
	l.Output("", PANIC, 2, s)
	panic(s)
}

// Panicf is equivalent to l.Printf() followed by a call to panic().
func (l *Logger) Panicf(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	l.Output("", PANIC, 2, s)
	panic(s)
}

// Panicln is equivalent to l.Println() followed by a call to panic().
func (l *Logger) Panicln(v ...interface{}) {
	s := fmt.Sprintln(v...)
	l.Output("", PANIC, 2, s)
	panic(s)
}

func (l *Logger) Stack(v ...interface{}) {
	s := fmt.Sprint(v...)
	s += "\n"
	buf := make([]byte, 1024*1024)
	n := runtime.Stack(buf, true)
	s += string(buf[:n])
	s += "\n"
	l.Output("", ERROR, 2, s)
}

func (l *Logger) Stat() (stats []int64) {
	l.mu.Lock()
	v := l.levelStats
	l.mu.Unlock()
	return v[:]
}

func isExist(path string) bool {
	_, err := os.Stat(path)
	return err == nil || os.IsExist(err)
}

// Print calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Print.
func Print(v ...interface{}) {
	if std != nil {
		std.Output("", INFO, 2, fmt.Sprint(v...))
	}
	if isConsole {
		console.Output("", INFO, 2, fmt.Sprint(v...))
	}
}

// Printf calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Printf.
func Printf(format string, v ...interface{}) {
	if std != nil {
		std.Output("", INFO, 2, fmt.Sprintf(format, v...))
	}
	if isConsole {
		console.Output("", INFO, 2, fmt.Sprintf(format, v...))
	}
}

// Println calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Println.
func Println(v ...interface{}) {
	if std != nil {
		std.Output("", INFO, 2, fmt.Sprintln(v...))
	}
	if isConsole {
		console.Output("", INFO, 2, fmt.Sprintln(v...))
	}
}

func Debugf(format string, v ...interface{}) {
	if std == nil || DEBUG < std.level {
		return
	}

	std.Output("", DEBUG, 2, fmt.Sprintf(format, v...))

	if isConsole {
		console.Output("", DEBUG, 2, fmt.Sprintf(format, v...))
	}
}

func Debug(v ...interface{}) {
	if std == nil || DEBUG < std.level {
		return
	}

	std.Output("", DEBUG, 2, fmt.Sprintln(v...))

	if isConsole {
		console.Output("", DEBUG, 2, fmt.Sprintln(v...))
	}
}

func Infof(format string, v ...interface{}) {
	if std == nil || INFO < std.level {
		return
	}

	std.Output("", INFO, 2, fmt.Sprintf(format, v...))

	if isConsole {
		console.Output("", INFO, 2, fmt.Sprintf(format, v...))
	}
}

func Info(v ...interface{}) {
	if std == nil || INFO < std.level {
		return
	}

	std.Output("", INFO, 2, fmt.Sprintln(v...))

	if isConsole {
		console.Output("", INFO, 2, fmt.Sprintln(v...))
	}
}

func Warnf(format string, v ...interface{}) {
	if std == nil || WARN < std.level {
		return
	}

	std.Output("", WARN, 2, fmt.Sprintf(format, v...))

	if isConsole {
		console.Output("", WARN, 2, fmt.Sprintf(format, v...))
	}
}

func Warn(v ...interface{}) {
	if std == nil || WARN < std.level {
		return
	}

	std.Output("", WARN, 2, fmt.Sprintln(v...))

	if isConsole {
		console.Output("", WARN, 2, fmt.Sprintln(v...))
	}
}

func Errorf(format string, v ...interface{}) {
	if std == nil || ERROR < std.level {
		return
	}

	std.Output("", ERROR, 2, fmt.Sprintf(format, v...))

	if isConsole {
		console.Output("", ERROR, 2, fmt.Sprintf(format, v...))
	}
}

func Error(v ...interface{}) {
	if std == nil {
		return
	}

	std.Output("", ERROR, 2, fmt.Sprintln(v...))

	if isConsole {
		console.Output("", ERROR, 2, fmt.Sprintln(v...))
	}
}

// Fatal is equivalent to Print() followed by a call to os.Exit(1).
func Fatal(v ...interface{}) {
	if std == nil {
		return
	}

	std.Output("", FATAL, 2, fmt.Sprint(v...))

	if isConsole {
		console.Output("", FATAL, 2, fmt.Sprint(v...))
	}
	os.Exit(1)
}

// Fatalf is equivalent to Printf() followed by a call to os.Exit(1).
func Fatalf(format string, v ...interface{}) {
	if std == nil {
		return
	}

	std.Output("", FATAL, 2, fmt.Sprintf(format, v...))

	if isConsole {
		console.Output("", FATAL, 2, fmt.Sprintf(format, v...))
	}

	os.Exit(1)
}

// Fatalln is equivalent to Println() followed by a call to os.Exit(1).
func Fatalln(v ...interface{}) {
	if std == nil {
		return
	}

	std.Output("", FATAL, 2, fmt.Sprintln(v...))

	if isConsole {
		console.Output("", FATAL, 2, fmt.Sprintln(v...))
	}

	os.Exit(1)
}

// Panic is equivalent to Print() followed by a call to panic().
func Panic(v ...interface{}) {
	if std == nil {
		return
	}

	s := fmt.Sprint(v...)

	std.Output("", PANIC, 2, s)

	if isConsole {
		console.Output("", PANIC, 2, s)
	}

	panic(s)
}

// Panicf is equivalent to Printf() followed by a call to panic().
func Panicf(format string, v ...interface{}) {
	if std == nil {
		return
	}

	s := fmt.Sprintf(format, v...)

	std.Output("", PANIC, 2, s)

	if isConsole {
		console.Output("", PANIC, 2, s)
	}

	panic(s)
}

// Panicln is equivalent to Println() followed by a call to panic().
func Panicln(v ...interface{}) {
	if std == nil {
		return
	}

	s := fmt.Sprintln(v...)

	std.Output("", PANIC, 2, s)

	if isConsole {
		console.Output("", PANIC, 2, s)
	}

	panic(s)
}

func Stack(v ...interface{}) {
	if std == nil {
		return
	}

	s := fmt.Sprint(v...)
	s += "\n"
	buf := make([]byte, 1024*1024)
	n := runtime.Stack(buf, true)
	s += string(buf[:n])
	s += "\n"

	std.Output("", ERROR, 2, s)

	if isConsole {
		console.Output("", ERROR, 2, s)
	}
}
